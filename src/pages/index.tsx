// "use client";
import Head from "next/head";

import { ARTICLE_SETTINGS, ARTICLE_COLLECTIONS } from "../client/queries";

import client from "../client/client";
import Card from "../themes/base/components/Card"

import Layout from '../themes/base/components/Layout'
import Image from 'next/image'
import Link from 'next/link'
import { Inter } from 'next/font/google'
//@ts-ignore

// import dynamic from 'next/dynamic'

/*const {Renderer} = dynamic(() => import('dante3/package/umd/Dante'), {
  loading: () => <p>Loading...</p>,
})*/

import styled from "@emotion/styled"
// @ts-ignore
// import Dante, {Renderer} from 'dante3/package/esm'


const inter = Inter({ subsets: ['latin'] })

/*

function HomeOld({site, collections}) {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      
      {<Renderer raw={
        {"type":"doc","content":[{"type":"paragraph"},{"type":"FileBlock","attrs":{"url":"blob:http://localhost:8080/fda338c3-79d5-4994-bb8a-8f1e6ebcfd52","src":null,"width":"","height":"","loading":true,"loading_progress":0,"caption":"caption!","direction":"center","file":{},"aspect_ratio":{"width":200,"height":200,"ratio":100}}}]}
      }/>}

      <Dante
        //widgets={defaultPlugins}
        //theme={theme || defaultTheme}
        fixed={true}
        content={"htmlContent"}
        autofocus={true}
        //style={{}}
        readOnly={false}
        onUpdate={(editor: any) => {
          //console.log("content", editor.getHTML())
          console.log("content", JSON.stringify(editor.getJSON()));
        }}
      />
    </main>
  )
}
*/

export default function Home({ site, collections }: { site: any, collections: any}) {
  return (
    <div className="page">
      <Head>
        <title>{`${site.name} Help center`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout className="py-12 sm:px-6 md:px-64 bg-gray-100" site={site}>
        <div className="md:grid md:grid-cols-3 md:gap-x-4 md:gap-y-10">
          {collections.map((card: any) => (
            <div className="m-4" key={card.id}>
              <Card
                imageSrc={null}
                className={null}
                title={
                  <Link passHref href={`/${card.slug}`} className={"hover:underline"} color={"primary"}>
                      {card.icon && (
                        <div className="flex items-center justify-center h-12 w-12 rounded-md bg-white bg-opacity-10">
                          <Image
                            src={`${process.env.HOST}${card.icon}`}
                            width="200"
                            height="200"
                            alt={card.title}
                          />
                        </div>
                      )}
                      <p className="mt-2 text-base">{card.title}</p>
                  </Link>
                }
                //description={truncateOnWord(card.description, 120)}
                description={card.description}
              ></Card>
            </div>
          ))}
        </div>
      </Layout>
    </div>
  );
}


// This function gets called at build time
export async function getStaticProps() {
  // Call an external API endpoint to get posts

  const res = await client(ARTICLE_SETTINGS, { domain: process.env.SITE });
  const site = await res.json();

  // console.log("SITE::")
  // console.log(site)

  const postsRes = await client(ARTICLE_COLLECTIONS, {
    domain: process.env.SITE,
    lang: process.env.DEFAULT_LOCALE || "en",
  });

  const {
    data: {
      helpCenter: { collections },
    },
  } = await postsRes.json();

  // console.log(collections);
  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      site,
      collections,
    },
    revalidate: 60,
  };
}

